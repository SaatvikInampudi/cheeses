# Result

```{r, message=FALSE,warning=FALSE, echo=FALSE}
# Install necessary packages
required_packages <- c("tidyverse", "tidytuesdayR", "naniar", "here", "fs", "rvest", "polite", "glue", "kableExtra")
installed_packages <- rownames(installed.packages())

# Load libraries
library(tidyverse)
library(tidytuesdayR)
library(naniar) # For missing value analysis
library(here)
library(fs)
library(rvest)
library(polite)
library(glue)
library(kableExtra) # For enhanced table styling
```



```{r,message=FALSE,warning=FALSE, echo=FALSE}
tuesdata <- tidytuesdayR::tt_load('2024-06-04')

# Extract the cheeses dataset
cheeses <- tuesdata$cheeses

# Save the cheeses dataset to a CSV file
# write.csv(cheeses, "cheeses_dataset.csv", row.names = FALSE)

# Confirm the file has been saved
cat("Dataset saved as 'cheeses_dataset.csv'")

# Display the first few rows
# head(cheeses)
```

```{r, message=FALSE,warning=FALSE, echo=FALSE}
# Cleaning and transforming the data

cheeses <- cheeses %>%
  mutate(
    fat_content = str_extract(fat_content, "\\d+\\.*\\d*") %>% as.numeric(),
    calcium_content = str_extract(calcium_content, "\\d+\\.*\\d*") %>% as.numeric(),
    vegetarian = case_when(
      vegetarian == "yes" ~ TRUE,
      vegetarian == "no" ~ FALSE,
      TRUE ~ NA
    ),
    vegan = case_when(
      vegan == "yes" ~ TRUE,
      vegan == "no" ~ FALSE,
      TRUE ~ NA
    )
  )

# Check the transformation
# glimpse(cheeses)
```


```{r, message=FALSE,warning=FALSE, echo=FALSE}
# Summary of missing values before cleaning
missing_summary_before <- cheeses %>%
  summarise_all(~ sum(is.na(.))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count") %>%
  arrange(desc(Missing_Count))

# Removing rows with missing fat_content
cheeses_clean <- cheeses %>%
  filter(!is.na(fat_content))

# Imputing missing calcium_content with the median value
cheeses_clean <- cheeses_clean %>%
  mutate(calcium_content = if_else(is.na(calcium_content),
                                   median(calcium_content, na.rm = TRUE),
                                   calcium_content))
```


```{r,warning=FALSE, echo=FALSE}
library(ggplot2)
library(dplyr)

# Filter out NA values in the milk column
cheeses_clean_filtered <- cheeses_clean %>%
  filter(!is.na(milk))

# Create the bar chart with enhanced x-axis labels
ggplot(cheeses_clean_filtered, aes(x = milk)) +
  geom_bar() +
  labs(
    title = "Distribution of Milk Types",
    x = "Milk Type",
    y = "Count"
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10), # Rotate x-axis labels at 45 degrees
    axis.title.x = element_text(size = 12),                      # Increase x-axis title size
    axis.text.y = element_text(size = 10)                        # Increase y-axis label size
  )
```

The bar chart reveals that cow’s milk overwhelmingly dominates cheese production, with a significantly higher count compared to other milk types. Goat and sheep milk are moderately popular, often appearing in pure form or mixed combinations like “goat, sheep” or “cow, goat.” Exotic milk types such as camel, moose, and water buffalo are used rarely, likely indicating niche or regional specialties. Overall, the chart emphasizes the global reliance on cow’s milk for cheese-making while also showcasing the diversity and occasional use of alternative milk sources.


```{r,warning=FALSE, echo=FALSE}
library(ggplot2)
library(dplyr)

# Filter out NA values in the region column and prepare data
region_counts <- cheeses_clean %>%
  filter(!is.na(region)) %>%       # Remove rows with NA in the region column
  count(region, sort = TRUE) %>%
  slice_head(n = 20)              # Select the top 20 regions

# Create the bar chart
ggplot(region_counts, aes(x = reorder(region, n), y = n)) +
  geom_bar(stat = "identity", fill = "orange") +
  coord_flip() +
  labs(
    title = "Top 20 Regions Producing Cheese",
    x = "Region",
    y = "Count"
  ) +
  theme_minimal()
```

```{r,warning=FALSE, echo=FALSE}
library(ggplot2)
library(dplyr)

# Prepare data: Count rind types and remove NA values
rind_counts <- cheeses_clean %>%
  filter(!is.na(rind)) %>%  # Remove rows with NA in rind
  count(rind, sort = TRUE)

# Create a horizontal bar chart
ggplot(rind_counts, aes(x = n, y = reorder(rind, n))) +
  geom_bar(stat = "identity", show.legend = FALSE, fill = 'blue') +
  labs(
    title = "Distribution of Rind Types",
    x = "Count",
    y = "Rind Type"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5), # Center the title
    axis.text.y = element_text(size = 12),                           # Adjust y-axis text size
    axis.text.x = element_text(size = 10),                           # Adjust x-axis text size
    axis.title.x = element_text(size = 12),                          # Adjust x-axis title size
    axis.title.y = element_text(size = 12)                           # Adjust y-axis title size
  )
```


```{r,warning=FALSE, echo=FALSE}
library(ggplot2)
library(dplyr)

# Filter out NA values in the color column
cheeses_clean_filtered <- cheeses_clean %>%
  filter(!is.na(color))

# Define a mapping of color names to their actual colors
color_mapping <- c(
  "yellow" = "yellow",
  "white" = "white",
  "straw" = "gold",
  "pale yellow" = "lightgoldenrod",
  "orange" = "orange",
  "ivory" = "ivory",
  "green" = "green",
  "golden yellow" = "goldenrod",
  "golden orange" = "darkorange",
  "cream" = "cornsilk",
  "brown" = "brown",
  "blue" = "blue"
)

# Create the bar chart with corresponding colors
ggplot(cheeses_clean_filtered, aes(x = color, fill = color)) +
  geom_bar() +
  coord_flip() +
  scale_fill_manual(values = color_mapping) +  # Map color names to actual colors
  labs(
    title = "Distribution of Cheese Colors",
    x = "Color",
    y = "Count"
  ) +
  theme_minimal() +
  theme(legend.position = "none")  # Remove the legend for a cleaner look
```


```{r,warning=FALSE, echo=FALSE}
library(dplyr)
library(tidytext)
library(wordcloud2)
aroma_words <- cheeses_clean %>% filter(!is.na(aroma)) %>%
  unnest_tokens(word, aroma) %>%
  count(word, sort = TRUE)

wordcloud2(aroma_words, size = 0.7, color = "random-dark")
```


```{r,warning=FALSE, echo=FALSE}
synonym_words <- cheeses_clean %>%
  filter(!is.na(synonyms)) %>%
  unnest_tokens(word, synonyms) %>%
  count(word, sort = TRUE)

wordcloud2(synonym_words, size = 0.7, color = "random-light")
```

```{r,warning=FALSE, echo=FALSE}
library(ggplot2)
library(dplyr)

# Prepare data for top 10 producers and remove NAs
top_producers <- cheeses_clean %>%
  filter(!is.na(producers)) %>%          # Remove rows with NA in producers
  count(producers, sort = TRUE) %>%
  head(10)                               # Select top 10 producers

# Create the bar chart
ggplot(top_producers, aes(x = n, y = reorder(producers, n))) +
  geom_bar(stat = "identity", fill = "darkgreen") +  # Horizontal bar chart with color
  labs(
    title = "Top 10 Cheese Producers",
    x = "Count",
    y = "Producers"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5), # Center the title
    axis.text.x = element_text(size = 12),                            # Adjust x-axis text size
    axis.text.y = element_text(size = 12),                            # Adjust y-axis text size
    axis.title.x = element_text(size = 14),                           # Adjust x-axis title size
    axis.title.y = element_text(size = 14)                            # Adjust y-axis title size
  )
```


```{r,warning=FALSE, echo=FALSE}
cheese_country_counts <- cheeses_clean %>%
  count(country, sort = TRUE) %>%
  head(15)

ggplot(cheese_country_counts, aes(x = reorder(country, n), y = n)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = "Top 15 Countries Producing Cheese",
       x = "Country",
       y = "Number of Cheeses") +
  theme_minimal()
```
The bar chart highlights France as the leading producer of cheese, significantly outpacing all other countries in the dataset. Renowned for its cheese-making tradition, France’s dominance reflects its global reputation for diverse and high-quality cheeses. Canada, the United States, and Italy follow as notable contributors, showcasing their strong cheese industries, which cater to both traditional and modern cheese varieties. Countries like Australia, Austria, and Germany also feature prominently, emphasizing their established roles in the global cheese market. Smaller producers such as Sweden, Ireland, Greece, and Denmark contribute niche and unique cheeses, enriching the global diversity of cheese production. However, the chart reveals inconsistencies in the dataset, with multiple entries for the United Kingdom (e.g., “England, United Kingdom” and “England, Great Britain, United Kingdom”), suggesting a need for data standardization. Overall, the chart underscores France’s unparalleled leadership while highlighting the global spread and diversity of cheese production.

```{r,warning=FALSE, echo=FALSE}
top_countries <- cheese_country_counts$country

ggplot(cheeses_clean %>% filter(country %in% top_countries), 
       aes(x = country, y = fat_content, fill = country)) +
  geom_boxplot() +
  coord_flip() +
  labs(title = "Fat Content Distribution Across Top Cheese-Producing Countries",
       x = "Country",
       y = "Fat Content (%)") +
  theme_minimal()
```
The boxplot visualizes the distribution of fat content percentages across cheeses from the top cheese-producing countries. Notably, Australia exhibits a wide range of fat content, with higher variability compared to other countries. Austria and France have relatively consistent fat content distributions, showing tighter interquartile ranges. Countries like Greece, Ireland, and Italy have moderately narrow distributions, indicating that cheeses from these regions tend to cluster around specific fat content levels. Outliers are present across several countries, such as France and the United States, highlighting unique cheeses with exceptionally high or low fat content. Additionally, there are redundant entries for the United Kingdom (e.g., “England, United Kingdom” and “England, Great Britain, United Kingdom”), suggesting the need for data standardization. Overall, the chart highlights both diversity in fat content and regional preferences or production standards in cheese-making across these nations.


```{r,warning=FALSE, echo=FALSE}
library(tidytext)
library(wordcloud2)

texture_words <- cheeses_clean %>%
  filter(!is.na(texture)) %>%
  unnest_tokens(word, texture) %>%
  count(word, sort = TRUE)

wordcloud2(texture_words, size = 0.7)
```


```{r,warning=FALSE, echo=FALSE}
library(treemapify)
library(ggplot2)
library(dplyr)

# Filter out rows with NA values in the country or family columns
cheese_diversity <- cheeses_clean %>%
  filter(!is.na(country), !is.na(family)) %>% # Remove NA values
  count(country, family, sort = TRUE)

# Create the treemap without NA values
ggplot(cheese_diversity, aes(area = n, fill = family, label = country)) +
  geom_treemap() +
  geom_treemap_text(color = "white", place = "center", grow = TRUE) +
  labs(title = "Cheese Production Diversity by Country",
       fill = "Family") +
  theme_minimal()
```
The treemap provides an engaging overview of cheese production diversity by country and family. Here are the key insights:

	1.	Prominent Cheese Producers:
	•	Countries like Canada, France, and Italy dominate the treemap, showcasing their significant contribution to cheese production. These nations are renowned for their rich cheese-making traditions and diverse cheese families.
	2.	Diverse Families in Specific Countries:
	•	Countries such as Italy and France show representation across multiple cheese families, reflecting their versatility and global influence in cheese-making.
	•	Canada also stands out for its contributions to a variety of cheese families, demonstrating its emerging presence in global cheese production.
	3.	Regional Specialization:
	•	Certain regions, such as Switzerland and Great Britain, are associated with fewer but distinctive cheese families, indicating a focus on specialty or artisanal cheese production.
	4.	Emerging Producers:
	•	Countries like India and Australia are also represented, signaling their growing role in the cheese industry. These regions may cater to unique local preferences or emerging global demand.
	5.	Cheese Family Highlights:
	•	Families like Cheddar, Camembert, and Brie appear in multiple countries, suggesting their universal appeal and widespread production.
	•	Specialized families such as Mozzarella are prominently tied to traditional cheese-producing regions like Italy.
	6.	Global Representation:
	•	The treemap highlights the diversity of cheese production, spanning traditional producers like France and Italy to countries with emerging cheese markets like India and Australia.


```{r,warning=FALSE, echo=FALSE}
library(ggplot2)
library(treemapify)
library(dplyr)

# Prepare data for cheese family counts
cheese_family_counts <- cheeses_clean %>%
  count(family, sort = TRUE) %>%
  na.omit()

# Dynamically generate a color palette
color_palette <- scales::hue_pal()(nrow(cheese_family_counts))

# Create a treemap using ggplot2 and treemapify
ggplot(cheese_family_counts, aes(area = n, fill = family, label = paste(family, "\n", n))) +
  geom_treemap() +
  geom_treemap_text(
    fontface = "italic", 
    colour = "white", 
    place = "centre", 
    grow = TRUE
  ) +
  scale_fill_manual(values = color_palette) + # Dynamically apply colors
  labs(
    title = "Cheese Family Diversity"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5), # Center the title
    legend.position = "none"                                          # Remove legend for clarity
  )
```

```{r,warning=FALSE, echo=FALSE}
library(tidytext)
library(wordcloud2)

flavor_words <- cheeses_clean %>%
  filter(!is.na(flavor)) %>%
  unnest_tokens(word, flavor) %>%
  count(word, sort = TRUE)

wordcloud2(flavor_words, size = 0.7, color = "random-dark")
```


```{r,warning=FALSE, echo=FALSE}
# Load required libraries
library(dplyr)
library(ggcorrplot)
library(corrplot)

# Step 1: Handle Missing Values and Select Numeric Columns
encoded_data <- cheeses_clean %>%
  mutate(across(where(is.character), as.factor)) %>% # Convert characters to factors
  mutate(across(where(is.factor), as.numeric)) %>%   # Convert factors to numeric
  select(where(is.numeric))                          # Select only numeric columns

# Check if numeric columns have missing values and handle them
encoded_data <- encoded_data %>%
  filter(rowSums(is.na(.)) < ncol(.))  # Drop rows where all values are NA

# Step 2: Compute the Correlation Matrix
if (ncol(encoded_data) > 1) {  # Ensure there are multiple columns for correlation
  correlation_matrix_full <- cor(encoded_data, use = "pairwise.complete.obs")
  
  # Step 3: Visualize the Correlation Matrix
  
  # Using ggcorrplot
  ggcorrplot(
    correlation_matrix_full,
    method = "circle",                  # Use circle for cleaner visuals
    type = "lower",                     # Display only the lower triangle
    lab = TRUE,                         # Display correlation coefficients
    lab_size = 4,                       # Increase size of coefficients
    digits = 2,                         # Limit coefficients to 2 decimal places
    insig = "blank",                    # Blank insignificant correlations
    colors = c("red", "white", "blue"), # Color gradient
    title = "Enhanced Correlation Matrix with Encoded Features",
    ggtheme = theme_minimal()           # Use minimal theme for clarity
  ) +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 10), # Rotate x-axis labels
      axis.text.y = element_text(size = 10),                       # Adjust y-axis label size
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5) # Enhance title
    )
  
  # Using corrplot (alternative visualization)
  corrplot(
    correlation_matrix_full, 
    method = "color",                  # Use color visualization
    type = "lower",                    # Display only the lower triangle
    addCoef.col = "black",             # Add correlation coefficients in black
    tl.col = "black",                  # Axis label color
    tl.cex = 0.8,                      # Adjust size of axis labels
    tl.srt = 45,                       # Rotate axis labels for clarity
    number.cex = 0.5,                  # Adjust size of correlation coefficients
    diag = FALSE,                      # Exclude the diagonal
    cl.cex = 0.8                       # Adjust size of color legend
  )
} else {
  message("Not enough numeric columns with complete data to compute correlations.")
}
```
The heatmap provides an overview of the correlation between different variables related to cheese. 
	1.	Family and Producers Are Strongly Correlated:
	•	A notable positive correlation (0.28–0.31) between family and producers indicates that certain cheese families are consistently associated with specific producers. This suggests specialization among cheese makers.
	2.	Texture and Fat Content Have a Relationship:
	•	There’s a moderate positive correlation (0.38) between texture and fat content, reflecting how fat content contributes to the texture of cheese. Cheeses with higher fat content often have a creamier or softer texture.
	3.	Alt Spellings and Synonyms Show a Strong Correlation:
	•	The highest correlation (0.78) is between alt_spellings and synonyms, indicating consistent data entries where multiple names or spellings are recorded together.
	4.	Region and Family Have a Weak Negative Correlation:
	•	A slight negative correlation (-0.26) between region and family could reflect the diversity of cheese families across regions. Some regions may specialize in a few families, while others are more diverse.
	5.	Flavor, Aroma, and Fat Content:
	•	Weak but positive correlations (0.15 for aroma-fat_content and 0.16 for flavor-fat_content) suggest a slight influence of fat content on cheese flavor and aroma. Richer cheeses may have a stronger flavor and aroma profile.
	6.	Low Correlation Between Calcium Content and Other Factors:
	•	Calcium_content shows minimal correlation with other variables, indicating that calcium content may not significantly vary by cheese type, family, or other attributes.
	7.	No Clear Trends for Country:
	•	The country variable shows weak correlations with most factors, suggesting that country of origin alone may not strongly influence cheese attributes.


```{r,warning=FALSE, echo=FALSE}
library(interactions)

# Generate interaction plot with better visuals
interaction.plot(
  cheeses_clean$milk, 
  cheeses_clean$type, 
  cheeses_clean$fat_content,
  col = rainbow(length(unique(cheeses_clean$type))), # Unique colors
  lty = 1:length(unique(cheeses_clean$type)),       # Different line types
  legend = FALSE,                                   # Disable default legend
  xlab = "Milk Type", 
  ylab = "Fat Content", 
  main = "Interaction Between Milk and Cheese Type",
  las = 2,               # Rotate x-axis labels vertically
  cex.axis = 0.8,        # Shrink axis labels
  cex.lab = 0.9,         # Shrink axis titles
  cex.main = 1.2         # Adjust main title size
)

# Create a custom legend outside the plot
legend(
  "topright", 
  inset = c(-0.4, 0), # Move the legend outside the plot area
  legend = unique(cheeses_clean$type), 
  col = rainbow(length(unique(cheeses_clean$type))),
  lty = 1:length(unique(cheeses_clean$type)),
  cex = 0.5,          # Reduce legend text size
  xpd = TRUE,         # Allow legend to go outside plot area
  bty = "n"           # Remove legend box
)
```
This graph illustrates the interaction between different types of milk and cheese types in terms of fat content.

	1.	Variation Across Milk Types:
	•	Cheeses made from different milk sources (e.g., cow, goat, buffalo) display noticeable differences in fat content.
	•	For example, cow milk cheeses exhibit a wider range of fat content compared to camel milk cheeses, which appear more consistent.
	2.	Distinct Trends:
	•	Certain combinations, like goat and sheep milk, seem to cluster together with mid-range fat content.
	•	Milk types like buffalo show higher fat content on average, which could be due to the inherent richness of buffalo milk.
	3.	Unique Characteristics:
	•	Moose milk cheeses stand out with their placement, possibly indicating a unique fat composition that doesn’t overlap much with other types.
	4.	Complex Interactions:
	•	The overlapping dashed lines suggest that similar cheese types made from different milk sources may share comparable fat content. However, some cheese types deviate, emphasizing the role of cheese-making techniques and processing methods.
	5.	Opportunities for Exploration:
	•	The graph hints at potential opportunities to explore why certain milk types produce cheeses with distinct fat content patterns and how this affects texture and flavor.


```{r,warning=FALSE, echo=FALSE, fig.width = 12, fig.height= 8}
library(ggalluvial)
cheese_tree <- cheeses_clean %>%
  count(family, type, sort = TRUE) %>%
  na.omit()
ggplot(cheese_tree, aes(axis1 = family, axis2 = type, y = n)) +
  geom_alluvium(aes(fill = family)) +
  geom_stratum() +
  geom_text(stat = "stratum", aes(label = after_stat(stratum)), size=3) +
  labs(
    title = "Cheese Families and Their Types",
    x = "Cheese Classification",
    y = "Count"
  ) +
  theme_minimal()
```

The diagram provides a fascinating look at the variety of cheese families and how they connect to specific types of cheese. Here are the main takeaways:
	1.	Popular Cheese Families:
	•	Some families, like Cheddar, Brie, and Blue, are widely known and have fewer but distinct types associated with them. These families seem to specialize in iconic cheese varieties that many people recognize.
	2.	Common Cheese Types:
	•	Types like hard and semi-hard cheeses are the most frequently found across different families. This suggests that these textures are versatile and commonly produced, appealing to a wide range of consumers.
	3.	Specialized Families:
	•	Certain families, such as Swiss Cheese or Pasta Filata, have unique characteristics and are associated with very specific types. These may represent niche or regional cheese varieties.
	4.	Rich Variety:
	•	Families like Camembert and Mozzarella showcase a rich diversity by being connected to multiple cheese types. This reflects how these families adapt to different preferences and uses.
	5.	Visual Complexity:
	•	The interconnected nature of the diagram highlights the complexity of the cheese world. It shows how certain families produce cheeses that overlap in texture and style, leading to a delightful variety.
	
```{r, fig.width = 12, fig.height= 8,warning=FALSE, echo=FALSE}
library(dplyr)
library(ggalluvial)
library(ggrepel)

# Step 1: Aggregate Data
alluvial_data <- cheeses_clean %>%
  filter(!is.na(region), !is.na(milk), !is.na(family), !is.na(type)) %>%
  count(milk, family, region, type, sort = TRUE)

# Step 2: Simplify Milk Type
alluvial_data <- alluvial_data %>%
  mutate(milk = case_when(
    str_detect(milk, ",") ~ "Mixed Milk",  # Combine mixed milk types
    TRUE ~ milk
  ))

# Step 3: Limit to Top Regions
top_regions <- alluvial_data %>%
  count(region, wt = n, sort = TRUE) %>%
  slice_head(n = 10) %>%
  pull(region)

alluvial_data <- alluvial_data %>%
  mutate(region = if_else(region %in% top_regions, region, "Other"))

# Step 4: Limit to Top Families
top_families <- alluvial_data %>%
  count(family, wt = n, sort = TRUE) %>%
  slice_head(n = 10) %>%
  pull(family)

alluvial_data <- alluvial_data %>%
  mutate(family = if_else(family %in% top_families, family, "Other"))

# Step 5: Create the Alluvial Diagram
ggplot(alluvial_data,
       aes(axis1 = milk, axis2 = family, axis3 = region, axis4 = type,
           y = n)) +
  geom_alluvium(aes(fill = milk), width = 0.3, alpha = 0.8) +  # Adjust stratum width
  geom_stratum(width = 0.3, fill = "grey") +  # Strata bars
  geom_text_repel(stat = "stratum", aes(label = after_stat(stratum)), 
                  size = 4, max.overlaps = 10) +  # Improved text labels
  scale_x_discrete(labels = c("Milk Type", "Cheese Family", "Region", "Type")) +  # Axis labels
  scale_fill_viridis_d(option = "D", direction = -1) +  # Colorblind-friendly palette
  labs(
    title = "Cheese Characteristics Alluvial Diagram",
    subtitle = "Visualizing relationships across key attributes of cheese",
    y = "Number of Cheeses",
    x = "Attributes",  # Add an axis label for clarity
    fill = "Milk Type"  # Improve legend title
  ) +
  annotate("text", x = 1, y = 70, label = "Milk Type", size = 5, hjust = 0) +
  annotate("text", x = 2, y = 70, label = "Cheese Family", size = 5, hjust = 0) +
  annotate("text", x = 3, y = 70, label = "Region", size = 5, hjust = 0) +
  annotate("text", x = 4, y = 70, label = "Type", size = 5, hjust = 0) +
  theme_minimal(base_size = 14) +  # Increase base font size for better readability
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
    legend.position = "top",  # Move legend to top
    legend.box = "vertical",  # Stack legend items vertically
    legend.key.width = unit(1, "cm"),  # Adjust key size
    legend.title = element_text(size = 12),  # Improve legend title size
    legend.text = element_text(size = 10)  # Improve legend text size
  )

# Save the plot with larger dimensions
ggsave("alluvial_diagram.png", width = 16, height = 10, dpi = 300)
```